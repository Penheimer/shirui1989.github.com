<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 计算机 | ABlog]]></title>
  <link href="http://www.shirui.me/blog/categories/计算机/atom.xml" rel="self"/>
  <link href="http://www.shirui.me/"/>
  <updated>2013-02-17T20:57:24+08:00</updated>
  <id>http://www.shirui.me/</id>
  <author>
    <name><![CDATA[施睿]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cl任意日期计算星期几]]></title>
    <link href="http://www.shirui.me/blog/2013/01/26/clren-yi-ri-qi-ji-suan-xing-qi-ji/"/>
    <updated>2013-01-26T15:20:00+08:00</updated>
    <id>http://www.shirui.me/blog/2013/01/26/clren-yi-ri-qi-ji-suan-xing-qi-ji</id>
    <content type="html"><![CDATA[<!--more-->


<p>Common Lisp实现输入日期计算当天是星期几，并可以计算从某年一月一日起算当天是当年第几天和任意两个日期之间差异。    <br/>
<code>(day-count-in-year month day year)</code>计算同年该日期是第几天。      <br/>
<code>(day-count-all m-initial d-initial y-initial m-final d-final y-final)</code>计算任意两天之间差多少天。    <br/>
<code>(week-days-indicator month day year)</code>计算当天是星期几。     <br/>
包含了1752年9月的特殊(<code>cal 9 1752</code>看看)，并且考虑到了1800年前后整百年份闰年定义方法的不同（1800年以后整百年份是整除400方为闰年，以前只要是整除4即是)。     <br/>
P.S.最后<code>(dairy year)</code>是苦逼屌丝周年日记。XD
``` cl ds.lisp
(defun month-length (month year) ;;月长，1800年以前的闰年算法不一样……shit
  (case month</p>

<pre><code>((1 3 5 7 8 10 12) 31)
(9 (if (= year 1752) 19 30))
(2 (if (&gt; 1800 year) (progn (if (= (mod year 4) 0) 29 28)) (progn (if (= (mod year 100) 0) (if (= (mod year 400) 0) 29 28) (if (= (mod year 4) 0) 29 28)))))
((4 6 11) 30)))
</code></pre>

<p>(defun year-length (year) ;;年长
  (case year</p>

<pre><code>(1752 355)
(otherwise (if (&gt; 1800 year) (progn (if (= (mod year 4) 0) 366 365)) (progn (if (= (mod year 100) 0) (if (= (mod year 400) 0) 366 365) (if (= (mod year 4) 0) 366 365)))))))
</code></pre>

<p>(defun day-count-in-year (month day year) ;;同一年内从1月1起算日数
  (case year</p>

<pre><code>(1752 (if (= month 1) day
    (if (= month 9)
      (if (&lt;= day 2) (+ day (loop for mon from 1 to (- month 1) summing (month-length mon year))) (- (+ day (loop for mon from 1 to (- month 1) summing (month-length mon year))) 11))
      (+ day (loop for mon from 1 to (- month 1) summing (month-length mon year))))))
(otherwise (if (= month 1) day (+ day (loop for mon from 1 to (- month 1) summing (month-length mon year)))))))
</code></pre>

<p>(defun day-count-all (month-initial day-initial year-initial month-final day-final year-final) ;;任意两个日期相差日数
  (if (= year-initial year-final)</p>

<pre><code>  (- (day-count-in-year month-final day-final year-final) (day-count-in-year month-initial day-initial year-initial))
  (-
(+ (day-count-in-year month-final day-final year-final) (loop for year from year-initial to (- year-final 1) summing (year-length year)))
(day-count-in-year month-initial day-initial year-initial))))
</code></pre>

<p>(defun week-days-after-1752-9 (daynum) ;;以1752年为基准计算星期
  (case (mod daynum 7) (0 "星期四") (1 "星期五") (2 "星期六") (3 "星期天") (4 "星期一") (5 "星期二") (6 "星期三")))
(defun week-days-before-1752-9 (daynum) ;;以1752年为标准计算星期
  (case (mod daynum 7) (6 "星期四") (5 "星期五") (4 "星期六") (3 "星期天") (2 "星期一") (1 "星期二") (0 "星期三")))
(defun week-days-indicator (month day year) ;;输出任意月/日/年对应星期几
  (if (string> (format nil "~4,'0d~2,'0d~2,'0d~%" year month day) "17520902")</p>

<pre><code>  (week-days-after-1752-9 (day-count-all 9 14 1752 month day year))
  (week-days-before-1752-9 (day-count-all month day year 9 2 1752))))
</code></pre>

<p>(defvar <em>what2do</em> nil)
(defun things () ;;连续喜当爹问题让我搞定了，现在是概率问题和我期望设计的”周一到周五工作，周六周日撸管子有点冲突……怎么都不完美……“
  (case (random 4)</p>

<pre><code>(0
 (push "搬砖、撸管子、意淫女神" *what2do*)
 (push "完事儿又被女神甩掉了" *what2do*)
 (push "只好陪女神去医院" *what2do*)
 (push "悲剧，原来是喜当爹了" *what2do*)
 (push "女神主动找我聊QQ，春天终于来了" *what2do*)
 (push "搬砖、撸管子、意淫女神" *what2do*)
 (push "搬砖、撸管子、意淫女神" *what2do*))
(1 (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "给我发了好人卡的女神又去找高富帅了" *what2do*)
   (push "原来是因为女神分手了心情不好" *what2do*)
   (push "女神终于接受我的表白" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*))
(2 (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "和女神聊QQ，被\"吃饭呵呵去洗澡\"" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*))
(3 (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "和女神聊QQ，被\"吃饭呵呵去洗澡\"" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*)
   (push "搬砖、撸管子、意淫女神" *what2do*))))
</code></pre>

<p>(defun write-db () (setf <em>what2do</em> nil) (loop repeat 53 do (things)))
(defun dairy (year)
  (write-db)
  (loop for mon from 1 to 12 do</p>

<pre><code>   (loop
  for day from 1 to (month-length mon year)
  for item in *what2do* do
    (format t "~2,'0d~a~2,'0d~a:~a~%" mon "月" day (week-days-indicator mon day year) item))))
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python限时输入]]></title>
    <link href="http://www.shirui.me/blog/2013/01/26/pythonxian-shi-shu-ru/"/>
    <updated>2013-01-26T14:49:00+08:00</updated>
    <id>http://www.shirui.me/blog/2013/01/26/pythonxian-shi-shu-ru</id>
    <content type="html"><![CDATA[<!--more-->


<p>使用threading模块实现限时输入：
``` python input_with_time_limit.py</p>

<h1>!/usr/bin/env python</h1>

<p>import time
import threading
import os</p>

<p>def exit(msg):</p>

<pre><code>print(msg)
os._exit(1)
</code></pre>

<p>def timer(limit):</p>

<pre><code>time.sleep(limit)
exit("\n%s秒已过，超时 !" % (limit))
</code></pre>

<p>def put(limit=30):</p>

<pre><code>t = threading.Thread(target=timer, args=(limit, ))
try :
    t.start()
    words = input("你有%s秒输入：" % (limit))
except KeyboardInterrupt :
    pass
exit("你输入了%s" % (words))
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Latex模板]]></title>
    <link href="http://www.shirui.me/blog/2013/01/22/latexmo-ban/"/>
    <updated>2013-01-22T22:11:00+08:00</updated>
    <id>http://www.shirui.me/blog/2013/01/22/latexmo-ban</id>
    <content type="html"><![CDATA[<!--more-->


<p>``` tex template.tex
\documentclass[UTF8,a4paper,winfonts,cs4size,oneside]{ctexart}
\defaultfontfeatures{Mapping=tex-text}
\usepackage{pdfpages}
\usepackage{ifpdf}
\usepackage{subfigure}
\usepackage{listings}
\usepackage[%
  pdfstartview=FitH,%
  CJKbookmarks=true,%
  bookmarks=true,%
  bookmarksnumbered=true,%
  bookmarksopen=true,%
  colorlinks=true,%
  citecolor=blue,%
  linkcolor=blue,%
  anchorcolor=green,%
  urlcolor=blue%
]{hyperref}
\usepackage{graphicx}
\usepackage{url}
\usepackage{texnames}
\topmargin -0.5 true cm
\oddsidemargin 0 true cm
\evensidemargin 0 true cm
\textheight 23.5 true cm
\textwidth 16 true cm
\usepackage{lastpage}
\usepackage{fancyhdr}
\pagestyle{fancy}
\renewcommand{\headrulewidth}{0.4pt}
%\renewcommand{\footrulewidth}{0.4pt}
\begin{document}
\lstset{numbers=left,
numberstyle=\tiny,
keywordstyle=\color{blue!70}, commentstyle=\color{red!50!green!50!blue!50},
frame=shadowbox,
rulesepcolor=\color{red!20!green!20!blue!20}}
\lstset{language=C++}%这条命令可以让LaTeX排版时将C++键字突出显示
\lstset{breaklines}%这条命令可以让LaTeX自动将长的代码行换行排版
\lstset{extendedchars=false}%这一条命令可以解决代码跨页时，章节标题，页眉等汉字不显示的问题
\CTEXsetup[name={第, 章}]{section}
\CTEXsetup[number={\chinese{section}}]{section}</p>

<p>\end{document}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress设置]]></title>
    <link href="http://www.shirui.me/blog/2013/01/22/octopress/"/>
    <updated>2013-01-22T17:01:00+08:00</updated>
    <id>http://www.shirui.me/blog/2013/01/22/octopress</id>
    <content type="html"><![CDATA[<h2>为什么Octopress ?</h2>

<p><a class="fsingle" href="http://drupal.org/files/project-images/octopress.png" title="Ocotpress"><img src="http://drupal.org/files/project-images/octopress.png" class="right" width="150" hight="112.5"></a>
这个基本上搜索一下<code>octopress</code>就得到了，有各种技术参数的分析和详细的介绍blablabla的一堆……</p>

<p>但是对于我，就一个很简单的理由——小章鱼太萌了——我喜欢萌物。</p>

<!--more-->


<h2>Git设置</h2>

<p>用以下命令会生成～/.ssh/id_rsa.pub文件：
<code>sh
$ ssh-keygen -C "username@email.com" -t rsa
</code>
在github网站选择“Account Settings”>>“SSH Public Keys”>>“Add another public key”，粘贴~/.ssh/id_rsa.pub里的内容。</p>

<h2>安装octopress</h2>

<p>下载并设置octopress
<code>sh
$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
$ ruby --version # 应该&gt;=1.9.2
$ gem install bundler # 可以把Gemfile的源修改成taobao：http://ruby.taobao.org/
$ bundle install
$ rake install # 安装默认主题，找其他主题可以用rake install['themename']
$ rake setup_github_pages # 设置你有读写权限的git repo，格式它有提示，就是你repo的ssh选项(HTTP SSH Git Read-Only)那几个选项里的ssh
</code>
完成这一步以后你就可以用<code>rake new_post["title"]</code>创建新博文，在./source/_posts底下编辑你的文章，使用
<code>rake generate</code>生成页面，<code>rake deploy</code>来发表；
或者直接<code>rake gen_deploy</code>；每当你修改主题或者发表文章什么的都需要这么做。<strong>注意修改_config.yml里对应的信息，比如url就是你的xxxx.github.com等等。</strong></p>

<h2>Octopress的工作方式</h2>

<p>这一点是我折腾各种东西包括新浪侧边栏、Fancybox等的一点总结，写在下面的内容之前。          <br/>
Octopress似乎是在本地生成好一个静态的网站然后上传的github的，写博文和新页面都是使用markdown文档，octopress真正的插件（plugins）是一些<code>.rb</code>的文件，在octopress根目录下的plugins文件夹里，在md文档中的用法也是

``` sh
{% .... %}</p>

<pre><code>content
</code></pre>

<p>{% end.... %}
<code>

的形式，当然md文档还有个好处是直接能用html，这对于我这个不会写插件的菜鸟来说是巨大的福音，譬如Fancybox，有位大牛就给Fancybox写了插件——[点这里](http://tritarget.org/blog/2012/05/07/integrating-photos-into-octopress-using-fancybox-and-plugin/)——里面写有具体的用法。         
我也使用了fancybox，但是没有用他的插件，比如这篇文章顶端的可爱的小章鱼，我插入那张图片只是简单地使用了如下代码：
</code> html
<a class="fsingle" href="http://drupal.org/files/project-images/octopress.png" title="Ocotpress"><img src="http://drupal.org/files/project-images/octopress.png" class="right" width="150" hight="112.5"></a>
<code>
的确比插件麻烦了不止一点半点……不过挺好用。        
由于octopress是把md文件生成html的，那我就得提一下html，我没学过html，但是有一点点的编程基础，兼之这段时间一直折腾octopress，所以有了个大概的理解；一个octopress文章页面似乎用了如下模板：
</code> html
<html>
<head></p>

<!--这里是各种js，css，字体什么的。-->


<p>&lt;\head>
<body></p>

<!--这里是主体内容，包括文章，评论，边栏，分享按钮，还有脚注。-->


<p>&lt;\body>
<html>
<code>``
大概带着这个框架，去看</code>source/<em>includes<code>文件夹下的文件，就不难明白，Octopress把这个模板分成了几个部分：</code><head></head><code>中的内容在</code>head.html<code>文件里，这个文件是一些基础信息，最底下还有几个</code>{% include ... %}<code>字样的行，表示包含</code>source/</em>includes`文件夹下的其他html文件。</p>

<h2>新浪微博边栏</h2>

<p>去<a href="http://weibo.com/tool/weiboshow">微博秀</a>生成一下代码，注意看里面对应的各种信息比如userid等等。然后在<code>./source/_includes/asides/</code>下建立一个weibo.html：

``` html weibo.html
{% if site.weibo_uid %}<br/>
<section><br/>
  <ul id="weibo"></p>

<pre><code>&lt;li&gt;  
  &lt;iframe   
    width="100%"   
    height="110 默认550，我只要一个头像～"
    class="share_self"   
    frameborder="0"   
    scrolling="no"
    src="http://widget.weibo.com/weiboshow/index.php?width=0&amp;height=550&amp;ptype={% if site.weibo_pic %}1{% else %}0{% endif %}&amp;speed=0&amp;skin={{weibo_skin}}&amp;isTitle=0&amp;fansRow=2&amp;noborder=0&amp;isWeibo={% if site.weibo_show %}1{% else %}0{% endif %}&amp;isFans=0&amp;uid={{site.weibo_uid}}&amp;verifier={{site.weibo_verifier}}"&gt;  
  &lt;/iframe&gt;  
&lt;/li&gt;  
</code></pre>

<p>  </ul><br/>
</section><br/>
{% endif %}</p>

<!--src=这一行除了一些改为可以在_config.yml里设置的，其余的配置比如边框什么的具体对照新浪的生成，e.g. isfans=0表示不显示粉丝-->


<p><code>

然后在./_config.yml文件里添加
</code> sh
weibo_uid: userid               # 填入uid<br/>
weibo_verifier: verifier         # 填入verifier
weibo_show: false      # 是否显示最近微博内容<br/>
weibo_pic: true          # 是否显示微博中的图片<br/>
weibo_skin: 2          # 使用哪种配色风格，数字为从1开始的微博秀风格序号
<code>``
具体参数包括边框显示等等看微博秀给你生成的代码；接下来在_config.yml里的</code>default_asides: [.....]`一行里添加asides/weibo.html，其他用逗号隔开。</p>

<h2>评论窗口</h2>

<p>评论窗口默认是disqus，这个是octopress默认支持的，<strong>不需要任何其他配置</strong>，只要去disqus注册一个账户，然后添加你的网址（比如xxxx.github.com）然后写一个博客名，接下来就是第三个<strong>Site Shortname</strong>窗口，这个会生成一个<strong>your_short_name.disqus.com</strong>的网址，供你管理评论，这个是唯一的。
然后在_config.yml里的
``` sh</p>

<h1>Disqus Comments</h1>

<p>disqus_short_name: your_short_name
disqus_show_comment_count: true
```
里填写刚才的那个shortname，就可以了。</p>

<p><strong>评论似乎还可以用多说，不过很多人不推荐，而且disqus是不需要什么设置的，只要填入shortname就可以了，比较方便，但它是全英文的界面。</strong></p>

<p><strong>目前貌似disqus会挂……所以附上多说的部分，其实还有灯鹭和友言，不过大同小异——</strong>        <br/>
首先在<code>./source/_layouts/post(还有page).html</code>里均<strong>添加如下内容在原有disqus那节下面</strong>(page.html是控制页面上是否出现评论，post.html是博文里是否出现评论，两个文件都需要添加)：

``` html page&amp;post.html</p>

<div>
<article class="hentry" role="article">
<!-->......上面接原有<!-->
{% if site.disqus_short_name and page.comments == true %}
  <section>
    <h1>Comments</h1>
    <div id="disqus_thread" aria-live="polite">{% include post/disqus_thread.html %}</div>
  </section>
{% endif %}
<!-->接disqus~~添加如下部分：<!-->
{% if site.youyan_show_comment_count == true and page.comments == true %}
    <section>
        <h1>发表评论</h1>
        {% include youyan.html %}
    </section>
{% endif %}
{% if site.denglu_show_comment_count == true and page.comments == true %}
    <section>
        <h1>发表评论</h1>
        {% include denglu.html %}
    </section>
{% endif %}
{% if site.duoshuo_show_comment_count == true and page.comments == true %}
    <section>
        <h1>发表评论</h1>
        {% include duoshuo.html %}
    </section>
{% endif %}
<!-->添加部分结束<!-->
</div>


<p> <!-->整个在<div>&lt;article....一节里，不然“发表评论”四个字会顶格。<!-->
<code>

然后在`./_config.yml`里添加
</code> sh
youyan_show_comment_count: false
denglu_show_comment_count: false
duoshuo_show_comment_count: true # 我用了多说
<code>``
接下来在</code>./source/_includes/`里新建一个duoshuo.html(或者youyan.html或者denglu.html，具体看你)   <br/>
因为这些都需要注册，代码里都带有userid，我就不贴出了；注册完毕以后网站会提供你代码，分别粘贴到这些html文件里就行。</p>

<h2>分享按钮</h2>

<p>然后是分享按钮，这个因为octopress默认支持的都是Twitter，FB和Google，想要国内主流网站的分享按钮还需要稍微设置一下。你有两个方法：<strong>找各个网站的分享按钮生成器：</strong>比如<a href="http://open.weibo.com/sharebutton">新浪微博分享按钮</a><strong>或者使用bshare：</strong></p>

<p>修改你的<code>./source/_includes/posts/sharing.html</code>为
``` html sharing.html</p>

<div class="bshare-custom"><div class="bsPromo bsPromo1"></div><a title="分享到QQ空间" class="bshare-qzone"></a><a title="分享到新浪微博" class="bshare-sinaminiblog"></a><a title="分享到人人网" class="bshare-renren"></a><a title="分享到腾讯微博" class="bshare-qqmb"></a><a title="分享到豆瓣" class="bshare-douban"></a><a title="更多平台" class="bshare-more bshare-more-icon more-style-addthis"></a><span class="BSHARE_COUNT bshare-share-count">0</span></div>


<script type="text/javascript" charset="utf-8" src="http://static.bshare.cn/b/button.js#style=-1&amp;uuid=&amp;pophcol=2&amp;lang=zh"></script>


<script type="text/javascript" charset="utf-8" src="http://static.bshare.cn/b/bshareC0.js"></script>


<p>```
或者你可以自己去<a href="http://www.bshare.cn/">bshare</a>注册一下，功能很多，还可以选择按钮样式。</p>

<p><strong>两者的不同似乎在于，如果你使用新浪的分享按钮生成器，那么可以使用你的userid，在别人分享的时候会出现@yourname的形式；至于bshare，我没发现他有这个功能，可能是我比较菜的缘故，如果有人知道可以，请不吝告知；我自己也会抽空详细了解一下bshare的各种服务的。</strong></p>

<p><strong>再提一点，最好把<code>_config.yml</code>里关于twitter之类的东西全都false掉～我是图方便直接重写了sharing.html；而bshare里有twitter和facebook，但是不能单独开/关了，只能是像以前那样加入if语句来控制整个bshare的开/关。</strong></p>

<h2>域名绑定</h2>

<p>在./source文件夹下新建一个文件CNAME，写入你要绑定的域名比如www.yourname.com什么的，然后到你的dns服务那里把www.yourname.com设置CNAME到你的yourname.github.com即可。</p>

<h2>Octopress更新</h2>

<p>定期更新一下octopress，官方有详细的<a href="http://octopress.org/docs/updating/">更新说明</a>       <br/>
如果<code>$ git pull octopress master</code>报错：      <br/>
<code>fatal: 'octopress' does not appear to be a git repository</code>的话     <br/>
原因可能是没有相应的远程分支，在<code>./.git/config</code>里应该没有<code>[remote "octopress"]</code>块，需要添加一下      <br/>
<code>$ git remote add octopress https://github.com/imathis/octopress.git</code></p>

<h2>添加回到顶部按钮</h2>

<p>是jquery的插件，动画效果不错。首先修改<code>./source/_includes/custom/head.html</code>文件，加入如下行：
``` html head.html</p>

<!-- jquery -->


<p></p>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js" type="text/javascript"></script>


<!-- easing plugin ( optional ) -->


<script src="https://raw.github.com/sksmatt/UItoTop-jQuery-Plugin/master/js/easing.js" type="text/javascript"></script>


<!-- UItoTop plugin -->


<script src="https://raw.github.com/sksmatt/UItoTop-jQuery-Plugin/master/js/jquery.ui.totop.js" type="text/javascript"></script>


<!-- Starting the plugin -->


<script type="text/javascript">
    $(document).ready(function() {
        
        var defaults = {
            containerID: 'toTop', // fading element id
            containerHoverID: 'toTopHover', // fading element hover id
            scrollSpeed: 1200,
            easingType: 'linear' 
        };
        
 
        $().UItoTop({ easingType: 'easeOutQuart' });
 
    });
</script>


<p><code>
然后修改`./source/stylesheets/screen.css`加入如下行：
</code> css screen.css</p>

<h1>toTop {</h1>

<pre><code>display:none;
text-decoration:none;
position:fixed;
bottom:150px;
right:100px;
overflow:hidden;
width:51px;
height:51px;
border:none;
text-indent:100%;
background:url(https://raw.github.com/sksmatt/UItoTop-jQuery-Plugin/master/img/ui.totop.png) no-repeat left top;
</code></pre>

<p>}</p>

<h1>toTopHover {</h1>

<pre><code>background:url(https://raw.github.com/sksmatt/UItoTop-jQuery-Plugin/master/img/ui.totop.png) no-repeat left -51px;
width:51px;
height:51px;
display:block;
overflow:hidden;
float:left;
opacity: 0;
-moz-opacity: 0;
filter:alpha(opacity=0);
</code></pre>

<p>}</p>

<h1>toTop:active, #toTop:focus {</h1>

<pre><code>outline:none;
</code></pre>

<p>}
<code>``
貌似默认</code>screen.css<code>只有一长长长长长……行，所以gvim打开都会顿一下，这个新建一行就行。还有上面的地址是我找的按钮图标，不喜欢可以自己去找。     
最后当然</code>$ rake generate;rake preview`看看效果～～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World!]]></title>
    <link href="http://www.shirui.me/blog/2013/01/21/hello/"/>
    <updated>2013-01-21T00:04:00+08:00</updated>
    <id>http://www.shirui.me/blog/2013/01/21/hello</id>
    <content type="html"><![CDATA[<!--more-->


<p>你好，世界！

<a href="https://raw.github.com/Shirui1989/blogmedia/master/Pic/施.jpg" rel="prettyPhoto" title="My logo"><img src="https://raw.github.com/Shirui1989/blogmedia/master/Pic/%E6%96%BD.jpg" width="250" height="250" alt="My Logo" /></a>
</p>
]]></content>
  </entry>
  
</feed>
